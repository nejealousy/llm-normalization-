import json
import csv
from difflib import SequenceMatcher
from sklearn.metrics import precision_score, recall_score, f1_score

# --- –°–ª–æ–≤–∞—Ä–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π ---

KEY_SYNONYMS = {
    "–±—Ä–µ–Ω–¥": ["–±—Ä–µ–Ω–¥", "–º–∞—Ä–∫–∞", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ"],
    "–º–æ–¥–µ–ª—å": ["–º–æ–¥–µ–ª—å", "–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", "–º–æ–¥–µ–ª–ª—å", "–º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å", "–Ω–∞–∑–≤–∞–Ω–∏–µ"],
    "–≤–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏": ["–≤–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "—Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞", "—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", "—Ç–æ–≤–∞—Ä", "–≤–∏–¥ —Ç–æ–≤–∞—Ä–∞"],
    "—Ç–∏–ø": ["—Ç–∏–ø", "—Ç–∏–ø –∏–∑–¥–µ–ª–∏—è", "—Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞", "—Ç–∏–ø –±–∞—Ç–∞—Ä–µ–∏"],
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã –∫–ª—é—á–µ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

VALUE_SYNONYMS = {
    "–¥–∞": ["–¥–∞", "–µ—Å—Ç—å", "true", "–∏—Å—Ç–∏–Ω–∞", "–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π", "yes"],
    "–Ω–µ—Ç": ["–Ω–µ—Ç", "false", "–Ω–µ—Ç—É", "–Ω–µ—Ç—É", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", "no"],
    "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ": ["–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "unknown", ""],
    # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

IMPORTANT_KEYS = {"–≤–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "–±—Ä–µ–Ω–¥", "–º–æ–¥–µ–ª—å", "—Ç–∏–ø"}

# --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ---

def normalize_str(s):
    if s is None:
        return ""
    return str(s).strip().lower()

# –ü–æ–∏—Å–∫ —Å–∏–Ω–æ–Ω–∏–º–∞ –∫–ª—é—á–∞
def normalize_key(key):
    key_norm = normalize_str(key)
    for main_key, syns in KEY_SYNONYMS.items():
        if key_norm == main_key:
            return main_key
        if key_norm in syns:
            return main_key
    return key_norm

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º —Å–∏–Ω–æ–Ω–∏–º–æ–≤
def normalize_value(val):
    val_norm = normalize_str(val)
    for main_val, syns in VALUE_SYNONYMS.items():
        if val_norm == main_val:
            return main_val
        if val_norm in syns:
            return main_val
    return val_norm

# –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π (SequenceMatcher)
def values_similar(a, b, threshold=0.7):
    a_norm = normalize_value(a)
    b_norm = normalize_value(b)
    ratio = SequenceMatcher(None, a_norm, b_norm).ratio()
    return ratio >= threshold

# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–π –º–µ–∂–¥—É —ç—Ç–∞–ª–æ–Ω–æ–º –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º ---

def match_keys(true_dict, pred_dict, threshold=0.55):
    matches = {}
    used_pred_keys = set()

    for true_key_raw, true_val in true_dict.items():
        true_key = normalize_key(true_key_raw)

        best_pred_key = None
        best_score = 0

        for pred_key_raw in pred_dict:
            if pred_key_raw in used_pred_keys:
                continue
            pred_key = normalize_key(pred_key_raw)
            score = SequenceMatcher(None, true_key, pred_key).ratio()
            if score > best_score and score >= threshold:
                best_score = score
                best_pred_key = pred_key_raw

        if best_pred_key:
            matches[true_key_raw] = (true_val, pred_dict[best_pred_key])
            used_pred_keys.add(best_pred_key)

    return matches

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ ---

def evaluate(test_dataset_path, llm_output_path):

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_data = []
    with open(test_dataset_path, encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            raw_text = row["raw_text"].strip()
            expected_attrs = json.loads(row["expected_attrs"].replace('""', '"'))
            test_data.append((raw_text, expected_attrs))

    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ LLM
    with open(llm_output_path, encoding="utf-8") as f:
        llm_outputs = json.load(f)

    # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π
    y_true_all = []
    y_pred_all = []

    # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∫–ª—é—á–µ–π
    y_true_important = []
    y_pred_important = []

    # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
    total_true_keys = 0
    total_matched = 0
    total_missing = 0
    total_value_mismatches = 0
    total_extra_keys = 0

    print("\n--- –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ ---\n")

    for raw_text, true_attrs in test_data:
        pred_attrs = llm_outputs.get(raw_text, {})

        if not isinstance(pred_attrs, dict):
            pred_attrs = {}

        matched = match_keys(true_attrs, pred_attrs)

        # –ü–æ–¥—Å—á–µ—Ç –∫–ª—é—á–µ–π
        true_keys_set = set(normalize_key(k) for k in true_attrs.keys())
        pred_keys_set = set(normalize_key(k) for k in pred_attrs.keys())
        matched_true_keys_set = set(normalize_key(k) for k in matched.keys())

        missing_keys = true_keys_set - matched_true_keys_set
        extra_keys = pred_keys_set - matched_true_keys_set

        # –û—Ç—á—ë—Ç –ø–æ –æ–¥–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
        print(f"--- –¢–æ–≤–∞—Ä: {raw_text}")

        if missing_keys:
            total_missing += len(missing_keys)
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {missing_keys}")

        if extra_keys:
            total_extra_keys += len(extra_keys)
            print(f"‚ÑπÔ∏è –õ–∏—à–Ω–∏–µ –∫–ª—é—á–∏: {extra_keys}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        value_mismatches = 0
        for true_key_raw, (true_val, pred_val) in matched.items():
            true_key = normalize_key(true_key_raw)
            total_true_keys += 1

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            true_val_norm = normalize_value(true_val)
            pred_val_norm = normalize_value(pred_val)

            if values_similar(true_val_norm, pred_val_norm):
                total_matched += 1
                y_true_all.append(1)
                y_pred_all.append(1)
                if true_key in IMPORTANT_KEYS:
                    y_true_important.append(1)
                    y_pred_important.append(1)
            else:
                total_value_mismatches += 1
                value_mismatches += 1
                y_true_all.append(1)
                y_pred_all.append(0)
                if true_key in IMPORTANT_KEYS:
                    y_true_important.append(1)
                    y_pred_important.append(0)
                print(f"‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –¥–ª—è '{true_key_raw}': —ç—Ç–∞–ª–æ–Ω='{true_val}', –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ='{pred_val}'")

        print(f"‚úÖ –°–æ–≤–ø–∞–≤—à–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {len(matched) - value_mismatches}")
        print(f"‚ùå –ù–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é: {value_mismatches}")
        print(f"‚ÑπÔ∏è –õ–∏—à–Ω–∏—Ö –∫–ª—é—á–µ–π –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {len(extra_keys)}")
        print()

    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    print("--- –ò—Ç–æ–≥ ---")
    print(f"–í—Å–µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ —ç—Ç–∞–ª–æ–Ω–µ: {total_true_keys}")
    print(f"–°–æ–≤–ø–∞–≤—à–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {total_matched}")
    print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {total_missing}")
    print(f"–ù–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é: {total_value_mismatches}")
    print(f"–õ–∏—à–Ω–∏—Ö –∫–ª—é—á–µ–π –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {total_extra_keys}")

    if y_true_all and y_pred_all:
        precision_all = precision_score(y_true_all, y_pred_all, zero_division=0)
        recall_all = recall_score(y_true_all, y_pred_all, zero_division=0)
        f1_all = f1_score(y_true_all, y_pred_all, zero_division=0)

        precision_imp = precision_score(y_true_important, y_pred_important, zero_division=0) if y_true_important else 0
        recall_imp = recall_score(y_true_important, y_pred_important, zero_division=0) if y_true_important else 0
        f1_imp = f1_score(y_true_important, y_pred_important, zero_division=0) if y_true_important else 0

        print("\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–≤—Å–µ –∫–ª—é—á–∏):")
        print(f"Precision: {precision_all:.3f}")
        print(f"Recall:    {recall_all:.3f}")
        print(f"F1 Score:  {f1_all:.3f}")

        print("\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–≤–∞–∂–Ω—ã–µ –∫–ª—é—á–∏):")
        print(f"Precision: {precision_imp:.3f}")
        print(f"Recall:    {recall_imp:.3f}")
        print(f"F1 Score:  {f1_imp:.3f}")
    else:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –º–µ—Ç—Ä–∏–∫.")

if __name__ == "__main__":
    evaluate("data/test_dataset.csv", "data/llm_outputs.json")
