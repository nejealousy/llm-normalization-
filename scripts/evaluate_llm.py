import json
import csv
from difflib import SequenceMatcher
from sklearn.metrics import precision_recall_fscore_support

def normalize_string(s):
    if s is None:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    return str(s).lower().strip()

def is_similar(a, b, threshold=0.8):
    a_norm = normalize_string(a)
    b_norm = normalize_string(b)
    return SequenceMatcher(None, a_norm, b_norm).ratio() >= threshold

def evaluate(test_data_file, llm_outputs_file, similarity_threshold=0.8):
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    test_data = []
    with open(test_data_file, encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            expected_attrs = json.loads(row["expected_attrs"].replace('""', '"'))
            test_data.append((row["raw_text"], expected_attrs))

    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–∏
    with open(llm_outputs_file, encoding="utf-8") as f:
        llm_outputs = json.load(f)

    y_true = []
    y_pred = []

    for raw_text, true_attrs in test_data:
        pred_attrs = llm_outputs.get(raw_text.strip(), {})

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ —ç—Ç–∞–ª–æ–Ω–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        all_keys = set(true_attrs.keys()).union(pred_attrs.keys())

        for key in all_keys:
            true_val = true_attrs.get(key, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            pred_val = pred_attrs.get(key, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            y_true.append(normalize_string(true_val))
            y_pred.append(normalize_string(pred_val))

    # –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —Å—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–æ—Ä–æ–≥—É –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
    y_true_binary = []
    y_pred_binary = []

    for true_v, pred_v in zip(y_true, y_pred):
        y_true_binary.append(1)  # –í —ç—Ç–∞–ª–æ–Ω–µ –∞—Ç—Ä–∏–±—É—Ç –µ—Å—Ç—å (–∏–ª–∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        y_pred_binary.append(1 if is_similar(true_v, pred_v, similarity_threshold) else 0)

    precision, recall, f1, _ = precision_recall_fscore_support(
        y_true_binary, y_pred_binary, average='binary', zero_division=0
    )

    print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ = {similarity_threshold}):")
    print(f"Precision: {precision:.3f}")
    print(f"Recall:    {recall:.3f}")
    print(f"F1 Score:  {f1:.3f}")

if __name__ == "__main__":
    evaluate("data/test_dataset.csv", "data/llm_outputs.json")
